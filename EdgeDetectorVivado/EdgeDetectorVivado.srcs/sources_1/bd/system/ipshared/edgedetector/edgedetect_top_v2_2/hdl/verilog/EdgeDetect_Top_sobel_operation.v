// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2015.4
// Copyright (C) 2015 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module EdgeDetect_Top_sobel_operation (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_val_address0,
        data_val_ce0,
        data_val_q0,
        ap_return_0,
        ap_return_1
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 8'b1;
parameter    ap_ST_st2_fsm_1 = 8'b10;
parameter    ap_ST_st3_fsm_2 = 8'b100;
parameter    ap_ST_st4_fsm_3 = 8'b1000;
parameter    ap_ST_st5_fsm_4 = 8'b10000;
parameter    ap_ST_st6_fsm_5 = 8'b100000;
parameter    ap_ST_st7_fsm_6 = 8'b1000000;
parameter    ap_ST_st8_fsm_7 = 8'b10000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv2_2 = 2'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_val_address0;
output   data_val_ce0;
input  [7:0] data_val_q0;
output  [31:0] ap_return_0;
output  [7:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_val_ce0;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm = 8'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_26;
wire   [1:0] Gx_0_address0;
reg    Gx_0_ce0;
wire   [1:0] Gx_0_q0;
wire   [1:0] Gx_2_address0;
reg    Gx_2_ce0;
wire   [1:0] Gx_2_q0;
wire   [1:0] Gy_0_address0;
reg    Gy_0_ce0;
wire   [1:0] Gy_0_q0;
wire   [1:0] Gy_1_address0;
reg    Gy_1_ce0;
wire   [2:0] Gy_1_q0;
wire   [1:0] Gy_2_address0;
reg    Gy_2_ce0;
wire   [1:0] Gy_2_q0;
wire   [1:0] rowOffset_fu_177_p2;
reg   [1:0] rowOffset_reg_482;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_81;
wire   [0:0] exitcond3_fu_171_p2;
wire   [31:0] val_fu_232_p2;
reg   [31:0] val_reg_512;
wire   [0:0] tmp_s_fu_244_p2;
reg   [0:0] tmp_s_reg_517;
wire   [0:0] tmp_6_fu_256_p2;
reg   [0:0] tmp_6_reg_523;
wire   [0:0] or_cond1_fu_290_p2;
reg   [0:0] or_cond1_reg_528;
wire   [4:0] tmp_13_fu_312_p2;
reg   [4:0] tmp_13_reg_533;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_114;
wire  signed [31:0] p_cast1_fu_318_p1;
reg  signed [31:0] p_cast1_reg_538;
wire   [31:0] p_cast2_fu_322_p1;
reg   [31:0] p_cast2_reg_543;
wire  signed [31:0] p_cast9_fu_326_p1;
reg  signed [31:0] p_cast9_reg_548;
wire  signed [31:0] p_cast8_fu_330_p1;
reg  signed [31:0] p_cast8_reg_553;
wire  signed [31:0] p_cast_fu_334_p1;
reg  signed [31:0] p_cast_reg_558;
wire   [1:0] colOffset_fu_344_p2;
reg   [1:0] colOffset_reg_566;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_133;
wire   [0:0] exitcond_fu_338_p2;
wire  signed [31:0] tmp_9_fu_364_p5;
reg  signed [31:0] tmp_9_reg_576;
wire  signed [31:0] tmp_11_fu_374_p5;
reg  signed [31:0] tmp_11_reg_581;
reg   [7:0] data_val_load_reg_586;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_150;
wire   [31:0] tmp_10_fu_386_p2;
reg   [31:0] tmp_10_reg_591;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_159;
wire   [31:0] tmp_12_fu_391_p2;
reg   [31:0] tmp_12_reg_596;
reg   [1:0] row_assign_reg_132;
reg   [1:0] col_assign_reg_144;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_178;
wire   [63:0] tmp_4_fu_183_p1;
wire  signed [63:0] tmp_17_cast_fu_359_p1;
reg   [31:0] x_assign_1_fu_52;
wire   [31:0] x_dir_fu_396_p2;
reg   [31:0] x_assign_fu_56;
wire   [31:0] y_dir_fu_401_p2;
wire   [0:0] abscond_i_fu_198_p2;
wire   [31:0] neg_i_fu_192_p2;
wire   [0:0] abscond_i1_fu_218_p2;
wire   [31:0] neg_i1_fu_212_p2;
wire   [31:0] abs_x_fu_224_p3;
wire   [31:0] abs_y_fu_204_p3;
wire   [31:0] tmp_fu_238_p2;
wire   [31:0] tmp_1_fu_250_p2;
wire   [0:0] tmp_2_fu_262_p3;
wire   [0:0] tmp_5_fu_276_p3;
wire   [0:0] or_cond_61_fu_270_p2;
wire   [0:0] or_cond4_fu_284_p2;
wire   [3:0] tmp_8_fu_300_p3;
wire   [4:0] p_shl_cast_fu_308_p1;
wire   [4:0] tmp_4_cast_fu_296_p1;
wire   [4:0] tmp_2_cast_fu_350_p1;
wire   [4:0] tmp_14_fu_354_p2;
wire   [7:0] tmp_10_fu_386_p0;
wire   [31:0] tmp_7_fu_383_p1;
wire   [7:0] tmp_12_fu_391_p0;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_298;
wire   [0:0] sel_tmp1_fu_416_p2;
wire   [0:0] sel_tmp2_fu_421_p2;
wire   [0:0] or_cond_fu_430_p2;
wire   [1:0] newSel_fu_426_p1;
wire   [1:0] newSel4_fu_435_p3;
wire   [1:0] dir_write_assign_fu_442_p3;
wire   [7:0] dir_write_assign_cast_fu_450_p1;
reg   [7:0] ap_NS_fsm;


EdgeDetect_Top_sobel_operation_Gx_0 #(
    .DataWidth( 2 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
Gx_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Gx_0_address0 ),
    .ce0( Gx_0_ce0 ),
    .q0( Gx_0_q0 )
);

EdgeDetect_Top_sobel_operation_Gx_2 #(
    .DataWidth( 2 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
Gx_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Gx_2_address0 ),
    .ce0( Gx_2_ce0 ),
    .q0( Gx_2_q0 )
);

EdgeDetect_Top_sobel_operation_Gy_0 #(
    .DataWidth( 2 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
Gy_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Gy_0_address0 ),
    .ce0( Gy_0_ce0 ),
    .q0( Gy_0_q0 )
);

EdgeDetect_Top_sobel_operation_Gy_1 #(
    .DataWidth( 3 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
Gy_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Gy_1_address0 ),
    .ce0( Gy_1_ce0 ),
    .q0( Gy_1_q0 )
);

EdgeDetect_Top_sobel_operation_Gy_0 #(
    .DataWidth( 2 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
Gy_2_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( Gy_2_address0 ),
    .ce0( Gy_2_ce0 ),
    .q0( Gy_2_q0 )
);

EdgeDetect_Top_mux_3to1_sel2_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
EdgeDetect_Top_mux_3to1_sel2_32_1_U64(
    .din1( p_cast1_reg_538 ),
    .din2( ap_const_lv32_0 ),
    .din3( p_cast2_reg_543 ),
    .din4( col_assign_reg_144 ),
    .dout( tmp_9_fu_364_p5 )
);

EdgeDetect_Top_mux_3to1_sel2_32_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
EdgeDetect_Top_mux_3to1_sel2_32_1_U65(
    .din1( p_cast9_reg_548 ),
    .din2( p_cast8_reg_553 ),
    .din3( p_cast_reg_558 ),
    .din4( col_assign_reg_144 ),
    .dout( tmp_11_fu_374_p5 )
);



always @ (posedge ap_clk) begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        col_assign_reg_144 <= colOffset_reg_566;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        col_assign_reg_144 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & ~(ap_const_lv1_0 == exitcond_fu_338_p2))) begin
        row_assign_reg_132 <= rowOffset_reg_482;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        row_assign_reg_132 <= ap_const_lv2_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        x_assign_1_fu_52 <= x_dir_fu_396_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_assign_1_fu_52 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6)) begin
        x_assign_fu_56 <= y_dir_fu_401_p2;
    end else if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        x_assign_fu_56 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        colOffset_reg_566 <= colOffset_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        data_val_load_reg_586 <= data_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond3_fu_171_p2 == ap_const_lv1_0))) begin
        or_cond1_reg_528 <= or_cond1_fu_290_p2;
        tmp_6_reg_523 <= tmp_6_fu_256_p2;
        tmp_s_reg_517 <= tmp_s_fu_244_p2;
        val_reg_512 <= val_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        p_cast1_reg_538 <= p_cast1_fu_318_p1;
        p_cast2_reg_543[1 : 0] <= p_cast2_fu_322_p1[1 : 0];
        p_cast8_reg_553 <= p_cast8_fu_330_p1;
        p_cast9_reg_548 <= p_cast9_fu_326_p1;
        p_cast_reg_558 <= p_cast_fu_334_p1;
        tmp_13_reg_533 <= tmp_13_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        rowOffset_reg_482 <= rowOffset_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        tmp_10_reg_591 <= tmp_10_fu_386_p2;
        tmp_12_reg_596 <= tmp_12_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) & (ap_const_lv1_0 == exitcond_fu_338_p2))) begin
        tmp_11_reg_581 <= tmp_11_fu_374_p5;
        tmp_9_reg_576 <= tmp_9_fu_364_p5;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Gx_0_ce0 = ap_const_logic_1;
    end else begin
        Gx_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Gx_2_ce0 = ap_const_logic_1;
    end else begin
        Gx_2_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Gy_0_ce0 = ap_const_logic_1;
    end else begin
        Gy_0_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Gy_1_ce0 = ap_const_logic_1;
    end else begin
        Gy_1_ce0 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st2_fsm_1) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        Gy_2_ce0 = ap_const_logic_1;
    end else begin
        Gy_2_ce0 = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0 or ap_sig_cseq_ST_st8_fsm_7) begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0) begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st8_fsm_7) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_26) begin
    if (ap_sig_bdd_26) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_81) begin
    if (ap_sig_bdd_81) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_114) begin
    if (ap_sig_bdd_114) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_133) begin
    if (ap_sig_bdd_133) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_150) begin
    if (ap_sig_bdd_150) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_159) begin
    if (ap_sig_bdd_159) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_178) begin
    if (ap_sig_bdd_178) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

always @ (ap_sig_bdd_298) begin
    if (ap_sig_bdd_298) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

always @ (ap_sig_cseq_ST_st4_fsm_3) begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        data_val_ce0 = ap_const_logic_1;
    end else begin
        data_val_ce0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or exitcond3_fu_171_p2 or exitcond_fu_338_p2) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(exitcond3_fu_171_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_338_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st1_fsm_0;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end


assign Gx_0_address0 = tmp_4_fu_183_p1;

assign Gx_2_address0 = tmp_4_fu_183_p1;

assign Gy_0_address0 = tmp_4_fu_183_p1;

assign Gy_1_address0 = tmp_4_fu_183_p1;

assign Gy_2_address0 = tmp_4_fu_183_p1;

assign abs_x_fu_224_p3 = ((abscond_i1_fu_218_p2[0:0] === 1'b1) ? x_assign_1_fu_52 : neg_i1_fu_212_p2);

assign abs_y_fu_204_p3 = ((abscond_i_fu_198_p2[0:0] === 1'b1) ? x_assign_fu_56 : neg_i_fu_192_p2);

assign abscond_i1_fu_218_p2 = ($signed(x_assign_1_fu_52) > $signed(32'b00000000000000000000000000000000)? 1'b1: 1'b0);

assign abscond_i_fu_198_p2 = ($signed(x_assign_fu_56) > $signed(32'b00000000000000000000000000000000)? 1'b1: 1'b0);

assign ap_return_0 = val_reg_512;

assign ap_return_1 = dir_write_assign_cast_fu_450_p1;


always @ (ap_CS_fsm) begin
    ap_sig_bdd_114 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_133 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_150 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_159 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_178 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_26 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_298 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end


always @ (ap_CS_fsm) begin
    ap_sig_bdd_81 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

assign colOffset_fu_344_p2 = (col_assign_reg_144 + ap_const_lv2_1);

assign data_val_address0 = tmp_17_cast_fu_359_p1;

assign dir_write_assign_cast_fu_450_p1 = dir_write_assign_fu_442_p3;

assign dir_write_assign_fu_442_p3 = ((or_cond_fu_430_p2[0:0] === 1'b1) ? newSel_fu_426_p1 : newSel4_fu_435_p3);

assign exitcond3_fu_171_p2 = (row_assign_reg_132 == ap_const_lv2_3? 1'b1: 1'b0);

assign exitcond_fu_338_p2 = (col_assign_reg_144 == ap_const_lv2_3? 1'b1: 1'b0);

assign neg_i1_fu_212_p2 = (ap_const_lv32_0 - x_assign_1_fu_52);

assign neg_i_fu_192_p2 = (ap_const_lv32_0 - x_assign_fu_56);

assign newSel4_fu_435_p3 = ((or_cond1_reg_528[0:0] === 1'b1) ? ap_const_lv2_2 : ap_const_lv2_3);

assign newSel_fu_426_p1 = sel_tmp2_fu_421_p2;

assign or_cond1_fu_290_p2 = (or_cond_61_fu_270_p2 | or_cond4_fu_284_p2);

assign or_cond4_fu_284_p2 = (tmp_5_fu_276_p3 & abscond_i_fu_198_p2);

assign or_cond_61_fu_270_p2 = (abscond_i1_fu_218_p2 & tmp_2_fu_262_p3);

assign or_cond_fu_430_p2 = (sel_tmp2_fu_421_p2 | tmp_s_reg_517);

assign p_cast1_fu_318_p1 = $signed(Gx_0_q0);

assign p_cast2_fu_322_p1 = Gx_2_q0;

assign p_cast8_fu_330_p1 = $signed(Gy_1_q0);

assign p_cast9_fu_326_p1 = $signed(Gy_0_q0);

assign p_cast_fu_334_p1 = $signed(Gy_2_q0);

assign p_shl_cast_fu_308_p1 = tmp_8_fu_300_p3;

assign rowOffset_fu_177_p2 = (row_assign_reg_132 + ap_const_lv2_1);

assign sel_tmp1_fu_416_p2 = (tmp_s_reg_517 ^ ap_const_lv1_1);

assign sel_tmp2_fu_421_p2 = (tmp_6_reg_523 & sel_tmp1_fu_416_p2);

assign tmp_10_fu_386_p0 = tmp_7_fu_383_p1;

assign tmp_10_fu_386_p2 = ($signed({{1'b0}, {tmp_10_fu_386_p0}}) * $signed(tmp_9_reg_576));

assign tmp_12_fu_391_p0 = tmp_7_fu_383_p1;

assign tmp_12_fu_391_p2 = ($signed({{1'b0}, {tmp_12_fu_391_p0}}) * $signed(tmp_11_reg_581));

assign tmp_13_fu_312_p2 = (p_shl_cast_fu_308_p1 - tmp_4_cast_fu_296_p1);

assign tmp_14_fu_354_p2 = (tmp_13_reg_533 + tmp_2_cast_fu_350_p1);

assign tmp_17_cast_fu_359_p1 = $signed(tmp_14_fu_354_p2);

assign tmp_1_fu_250_p2 = abs_y_fu_204_p3 << ap_const_lv32_1;

assign tmp_2_cast_fu_350_p1 = col_assign_reg_144;

assign tmp_2_fu_262_p3 = x_assign_fu_56[ap_const_lv32_1F];

assign tmp_4_cast_fu_296_p1 = row_assign_reg_132;

assign tmp_4_fu_183_p1 = row_assign_reg_132;

assign tmp_5_fu_276_p3 = x_assign_1_fu_52[ap_const_lv32_1F];

assign tmp_6_fu_256_p2 = ($signed(abs_x_fu_224_p3) > $signed(tmp_1_fu_250_p2)? 1'b1: 1'b0);

assign tmp_7_fu_383_p1 = data_val_load_reg_586;

assign tmp_8_fu_300_p3 = {{row_assign_reg_132}, {ap_const_lv2_0}};

assign tmp_fu_238_p2 = abs_x_fu_224_p3 << ap_const_lv32_1;

assign tmp_s_fu_244_p2 = ($signed(tmp_fu_238_p2) < $signed(abs_y_fu_204_p3)? 1'b1: 1'b0);

assign val_fu_232_p2 = (abs_x_fu_224_p3 + abs_y_fu_204_p3);

assign x_dir_fu_396_p2 = (x_assign_1_fu_52 + tmp_10_reg_591);

assign y_dir_fu_401_p2 = (x_assign_fu_56 + tmp_12_reg_596);
always @ (posedge ap_clk) begin
    p_cast2_reg_543[31:2] <= 30'b000000000000000000000000000000;
end



endmodule //EdgeDetect_Top_sobel_operation

