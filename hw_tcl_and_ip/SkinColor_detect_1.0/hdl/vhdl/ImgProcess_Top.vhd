-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ImgProcess_Top is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    INPUT_STREAM_TVALID : IN STD_LOGIC;
    INPUT_STREAM_TREADY : OUT STD_LOGIC;
    OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
    OUTPUT_STREAM_TREADY : IN STD_LOGIC );
end;


architecture behav of ImgProcess_Top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ImgProcess_Top,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=7,HLS_SYN_FF=1419,HLS_SYN_LUT=1623}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal rows : STD_LOGIC_VECTOR (31 downto 0);
    signal cols : STD_LOGIC_VECTOR (31 downto 0);
    signal y_lower : STD_LOGIC_VECTOR (31 downto 0);
    signal y_upper : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_lower : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_upper : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_lower : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_upper : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_ap_start : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_done : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_continue : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_idle : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_out : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_start_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_dst_mat_rows_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_Mat_exit45_pro_U0_dst_mat_rows_V_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_dst_mat_cols_V_out_din : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_Mat_exit45_pro_U0_dst_mat_cols_V_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_y_lower_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_y_lower_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_y_upper_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_y_upper_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cb_lower_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cb_lower_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cb_upper_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cb_upper_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cr_lower_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cr_lower_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_cr_upper_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_Mat_exit45_pro_U0_cr_upper_out_write : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal Block_Mat_exit45_pro_U0_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_channel_done_src_mat_cols_V_chann : STD_LOGIC;
    signal src_mat_cols_V_chann_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_src_mat_cols_V_chann : STD_LOGIC := '0';
    signal ap_sync_channel_write_src_mat_cols_V_chann : STD_LOGIC;
    signal ap_channel_done_src_mat_rows_V_chann : STD_LOGIC;
    signal src_mat_rows_V_chann_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_src_mat_rows_V_chann : STD_LOGIC := '0';
    signal ap_sync_channel_write_src_mat_rows_V_chann : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_done : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_INPUT_STREAM_TREADY : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_0_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_1_V_write : STD_LOGIC;
    signal AXIvideo2Mat_U0_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal AXIvideo2Mat_U0_img_data_stream_2_V_write : STD_LOGIC;
    signal ImgProcess_U0_ap_start : STD_LOGIC;
    signal ImgProcess_U0_ap_done : STD_LOGIC;
    signal ImgProcess_U0_ap_continue : STD_LOGIC;
    signal ImgProcess_U0_ap_idle : STD_LOGIC;
    signal ImgProcess_U0_ap_ready : STD_LOGIC;
    signal ImgProcess_U0_p_src_data_stream_0_V_read : STD_LOGIC;
    signal ImgProcess_U0_p_src_data_stream_1_V_read : STD_LOGIC;
    signal ImgProcess_U0_p_src_data_stream_2_V_read : STD_LOGIC;
    signal ImgProcess_U0_p_dst_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ImgProcess_U0_p_dst_data_stream_0_V_write : STD_LOGIC;
    signal ImgProcess_U0_p_dst_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ImgProcess_U0_p_dst_data_stream_1_V_write : STD_LOGIC;
    signal ImgProcess_U0_p_dst_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal ImgProcess_U0_p_dst_data_stream_2_V_write : STD_LOGIC;
    signal ImgProcess_U0_y_lower_read : STD_LOGIC;
    signal ImgProcess_U0_y_upper_read : STD_LOGIC;
    signal ImgProcess_U0_cb_lower_read : STD_LOGIC;
    signal ImgProcess_U0_cb_upper_read : STD_LOGIC;
    signal ImgProcess_U0_cr_lower_read : STD_LOGIC;
    signal ImgProcess_U0_cr_upper_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_start : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_done : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal Mat2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_rows_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_cols_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_0_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_1_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_img_data_stream_2_V_read : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID : STD_LOGIC;
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_hs_continue : STD_LOGIC;
    signal dst_mat_rows_V_chann_full_n : STD_LOGIC;
    signal dst_mat_rows_V_chann_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal dst_mat_rows_V_chann_empty_n : STD_LOGIC;
    signal dst_mat_cols_V_chann_full_n : STD_LOGIC;
    signal dst_mat_cols_V_chann_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal dst_mat_cols_V_chann_empty_n : STD_LOGIC;
    signal y_lower_channel_full_n : STD_LOGIC;
    signal y_lower_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_lower_channel_empty_n : STD_LOGIC;
    signal y_upper_channel_full_n : STD_LOGIC;
    signal y_upper_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_upper_channel_empty_n : STD_LOGIC;
    signal cb_lower_channel_full_n : STD_LOGIC;
    signal cb_lower_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_lower_channel_empty_n : STD_LOGIC;
    signal cb_upper_channel_full_n : STD_LOGIC;
    signal cb_upper_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cb_upper_channel_empty_n : STD_LOGIC;
    signal cr_lower_channel_full_n : STD_LOGIC;
    signal cr_lower_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_lower_channel_empty_n : STD_LOGIC;
    signal cr_upper_channel_full_n : STD_LOGIC;
    signal cr_upper_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cr_upper_channel_empty_n : STD_LOGIC;
    signal src_mat_rows_V_chann_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_mat_rows_V_chann_empty_n : STD_LOGIC;
    signal src_mat_cols_V_chann_dout : STD_LOGIC_VECTOR (11 downto 0);
    signal src_mat_cols_V_chann_empty_n : STD_LOGIC;
    signal src_mat_data_stream_s_full_n : STD_LOGIC;
    signal src_mat_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_mat_data_stream_s_empty_n : STD_LOGIC;
    signal src_mat_data_stream_1_full_n : STD_LOGIC;
    signal src_mat_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_mat_data_stream_1_empty_n : STD_LOGIC;
    signal src_mat_data_stream_2_full_n : STD_LOGIC;
    signal src_mat_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal src_mat_data_stream_2_empty_n : STD_LOGIC;
    signal dst_mat_data_stream_s_full_n : STD_LOGIC;
    signal dst_mat_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_mat_data_stream_s_empty_n : STD_LOGIC;
    signal dst_mat_data_stream_1_full_n : STD_LOGIC;
    signal dst_mat_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_mat_data_stream_1_empty_n : STD_LOGIC;
    signal dst_mat_data_stream_2_full_n : STD_LOGIC;
    signal dst_mat_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dst_mat_data_stream_2_empty_n : STD_LOGIC;
    signal ap_hs_done : STD_LOGIC;
    signal ap_hs_ready : STD_LOGIC;
    signal ap_sync_reg_AXIvideo2Mat_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2Mat_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2Mat_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_Mat_exit45_pro_U0_ap_ready : STD_LOGIC;
    signal Block_Mat_exit45_pro_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_AXIvideo2Mat_U0_ap_start : STD_LOGIC;
    signal ap_sync_Block_Mat_exit45_pro_U0_ap_start : STD_LOGIC;
    signal start_for_ImgProcess_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ImgProcess_U0_full_n : STD_LOGIC;
    signal start_for_ImgProcess_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_ImgProcess_U0_empty_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_Mat2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Mat2AXIvideo_U0_empty_n : STD_LOGIC;

    component Block_Mat_exit45_pro IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        y_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        y_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_lower : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_upper : IN STD_LOGIC_VECTOR (31 downto 0);
        dst_mat_rows_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        dst_mat_rows_V_out_full_n : IN STD_LOGIC;
        dst_mat_rows_V_out_write : OUT STD_LOGIC;
        dst_mat_cols_V_out_din : OUT STD_LOGIC_VECTOR (11 downto 0);
        dst_mat_cols_V_out_full_n : IN STD_LOGIC;
        dst_mat_cols_V_out_write : OUT STD_LOGIC;
        y_lower_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_lower_out_full_n : IN STD_LOGIC;
        y_lower_out_write : OUT STD_LOGIC;
        y_upper_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_upper_out_full_n : IN STD_LOGIC;
        y_upper_out_write : OUT STD_LOGIC;
        cb_lower_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_out_full_n : IN STD_LOGIC;
        cb_lower_out_write : OUT STD_LOGIC;
        cb_upper_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_out_full_n : IN STD_LOGIC;
        cb_upper_out_write : OUT STD_LOGIC;
        cr_lower_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_out_full_n : IN STD_LOGIC;
        cr_lower_out_write : OUT STD_LOGIC;
        cr_upper_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_out_full_n : IN STD_LOGIC;
        cr_upper_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component AXIvideo2Mat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        INPUT_STREAM_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        INPUT_STREAM_TVALID : IN STD_LOGIC;
        INPUT_STREAM_TREADY : OUT STD_LOGIC;
        INPUT_STREAM_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        INPUT_STREAM_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        INPUT_STREAM_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_rows_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_read : IN STD_LOGIC_VECTOR (11 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC );
    end component;


    component ImgProcess IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_src_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_0_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_0_V_read : OUT STD_LOGIC;
        p_src_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_1_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_1_V_read : OUT STD_LOGIC;
        p_src_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        p_src_data_stream_2_V_empty_n : IN STD_LOGIC;
        p_src_data_stream_2_V_read : OUT STD_LOGIC;
        p_dst_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_0_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_0_V_write : OUT STD_LOGIC;
        p_dst_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_1_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_1_V_write : OUT STD_LOGIC;
        p_dst_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        p_dst_data_stream_2_V_full_n : IN STD_LOGIC;
        p_dst_data_stream_2_V_write : OUT STD_LOGIC;
        y_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_lower_empty_n : IN STD_LOGIC;
        y_lower_read : OUT STD_LOGIC;
        y_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_upper_empty_n : IN STD_LOGIC;
        y_upper_read : OUT STD_LOGIC;
        cb_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_lower_empty_n : IN STD_LOGIC;
        cb_lower_read : OUT STD_LOGIC;
        cb_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cb_upper_empty_n : IN STD_LOGIC;
        cb_upper_read : OUT STD_LOGIC;
        cr_lower_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_lower_empty_n : IN STD_LOGIC;
        cr_lower_read : OUT STD_LOGIC;
        cr_upper_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cr_upper_empty_n : IN STD_LOGIC;
        cr_upper_read : OUT STD_LOGIC );
    end component;


    component Mat2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_rows_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_rows_V_empty_n : IN STD_LOGIC;
        img_rows_V_read : OUT STD_LOGIC;
        img_cols_V_dout : IN STD_LOGIC_VECTOR (11 downto 0);
        img_cols_V_empty_n : IN STD_LOGIC;
        img_cols_V_read : OUT STD_LOGIC;
        img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_empty_n : IN STD_LOGIC;
        img_data_stream_0_V_read : OUT STD_LOGIC;
        img_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_empty_n : IN STD_LOGIC;
        img_data_stream_1_V_read : OUT STD_LOGIC;
        img_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_empty_n : IN STD_LOGIC;
        img_data_stream_2_V_read : OUT STD_LOGIC;
        OUTPUT_STREAM_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        OUTPUT_STREAM_TVALID : OUT STD_LOGIC;
        OUTPUT_STREAM_TREADY : IN STD_LOGIC;
        OUTPUT_STREAM_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        OUTPUT_STREAM_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        OUTPUT_STREAM_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component ImgProcess_Top_dsg8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_dshbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_y_ibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_y_jbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_cbkbM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_cblbW IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_crmb6 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_crncg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_srocq IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_srpcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (11 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (11 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_srqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_srrcU IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_srsc4 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_dstde IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_dsudo IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_dsvdy IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_ImgProcwdI IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Mat2AXIxdS IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component ImgProcess_Top_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        rows : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_lower : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_upper : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_lower : OUT STD_LOGIC_VECTOR (31 downto 0);
        cb_upper : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_lower : OUT STD_LOGIC_VECTOR (31 downto 0);
        cr_upper : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    ImgProcess_Top_CONTROL_BUS_s_axi_U : component ImgProcess_Top_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        rows => rows,
        cols => cols,
        y_lower => y_lower,
        y_upper => y_upper,
        cb_lower => cb_lower,
        cb_upper => cb_upper,
        cr_lower => cr_lower,
        cr_upper => cr_upper);

    Block_Mat_exit45_pro_U0 : component Block_Mat_exit45_pro
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_Mat_exit45_pro_U0_ap_start,
        start_full_n => start_for_Mat2AXIvideo_U0_full_n,
        ap_done => Block_Mat_exit45_pro_U0_ap_done,
        ap_continue => Block_Mat_exit45_pro_U0_ap_continue,
        ap_idle => Block_Mat_exit45_pro_U0_ap_idle,
        ap_ready => Block_Mat_exit45_pro_U0_ap_ready,
        start_out => Block_Mat_exit45_pro_U0_start_out,
        start_write => Block_Mat_exit45_pro_U0_start_write,
        rows => rows,
        cols => cols,
        y_lower => y_lower,
        y_upper => y_upper,
        cb_lower => cb_lower,
        cb_upper => cb_upper,
        cr_lower => cr_lower,
        cr_upper => cr_upper,
        dst_mat_rows_V_out_din => Block_Mat_exit45_pro_U0_dst_mat_rows_V_out_din,
        dst_mat_rows_V_out_full_n => dst_mat_rows_V_chann_full_n,
        dst_mat_rows_V_out_write => Block_Mat_exit45_pro_U0_dst_mat_rows_V_out_write,
        dst_mat_cols_V_out_din => Block_Mat_exit45_pro_U0_dst_mat_cols_V_out_din,
        dst_mat_cols_V_out_full_n => dst_mat_cols_V_chann_full_n,
        dst_mat_cols_V_out_write => Block_Mat_exit45_pro_U0_dst_mat_cols_V_out_write,
        y_lower_out_din => Block_Mat_exit45_pro_U0_y_lower_out_din,
        y_lower_out_full_n => y_lower_channel_full_n,
        y_lower_out_write => Block_Mat_exit45_pro_U0_y_lower_out_write,
        y_upper_out_din => Block_Mat_exit45_pro_U0_y_upper_out_din,
        y_upper_out_full_n => y_upper_channel_full_n,
        y_upper_out_write => Block_Mat_exit45_pro_U0_y_upper_out_write,
        cb_lower_out_din => Block_Mat_exit45_pro_U0_cb_lower_out_din,
        cb_lower_out_full_n => cb_lower_channel_full_n,
        cb_lower_out_write => Block_Mat_exit45_pro_U0_cb_lower_out_write,
        cb_upper_out_din => Block_Mat_exit45_pro_U0_cb_upper_out_din,
        cb_upper_out_full_n => cb_upper_channel_full_n,
        cb_upper_out_write => Block_Mat_exit45_pro_U0_cb_upper_out_write,
        cr_lower_out_din => Block_Mat_exit45_pro_U0_cr_lower_out_din,
        cr_lower_out_full_n => cr_lower_channel_full_n,
        cr_lower_out_write => Block_Mat_exit45_pro_U0_cr_lower_out_write,
        cr_upper_out_din => Block_Mat_exit45_pro_U0_cr_upper_out_din,
        cr_upper_out_full_n => cr_upper_channel_full_n,
        cr_upper_out_write => Block_Mat_exit45_pro_U0_cr_upper_out_write,
        ap_return_0 => Block_Mat_exit45_pro_U0_ap_return_0,
        ap_return_1 => Block_Mat_exit45_pro_U0_ap_return_1);

    AXIvideo2Mat_U0 : component AXIvideo2Mat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2Mat_U0_ap_start,
        ap_done => AXIvideo2Mat_U0_ap_done,
        ap_continue => AXIvideo2Mat_U0_ap_continue,
        ap_idle => AXIvideo2Mat_U0_ap_idle,
        ap_ready => AXIvideo2Mat_U0_ap_ready,
        INPUT_STREAM_TDATA => INPUT_STREAM_TDATA,
        INPUT_STREAM_TVALID => INPUT_STREAM_TVALID,
        INPUT_STREAM_TREADY => AXIvideo2Mat_U0_INPUT_STREAM_TREADY,
        INPUT_STREAM_TKEEP => INPUT_STREAM_TKEEP,
        INPUT_STREAM_TSTRB => INPUT_STREAM_TSTRB,
        INPUT_STREAM_TUSER => INPUT_STREAM_TUSER,
        INPUT_STREAM_TLAST => INPUT_STREAM_TLAST,
        INPUT_STREAM_TID => INPUT_STREAM_TID,
        INPUT_STREAM_TDEST => INPUT_STREAM_TDEST,
        img_rows_V_read => src_mat_rows_V_chann_dout,
        img_cols_V_read => src_mat_cols_V_chann_dout,
        img_data_stream_0_V_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => src_mat_data_stream_s_full_n,
        img_data_stream_0_V_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        img_data_stream_1_V_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => src_mat_data_stream_1_full_n,
        img_data_stream_1_V_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        img_data_stream_2_V_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => src_mat_data_stream_2_full_n,
        img_data_stream_2_V_write => AXIvideo2Mat_U0_img_data_stream_2_V_write);

    ImgProcess_U0 : component ImgProcess
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ImgProcess_U0_ap_start,
        ap_done => ImgProcess_U0_ap_done,
        ap_continue => ImgProcess_U0_ap_continue,
        ap_idle => ImgProcess_U0_ap_idle,
        ap_ready => ImgProcess_U0_ap_ready,
        p_src_data_stream_0_V_dout => src_mat_data_stream_s_dout,
        p_src_data_stream_0_V_empty_n => src_mat_data_stream_s_empty_n,
        p_src_data_stream_0_V_read => ImgProcess_U0_p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout => src_mat_data_stream_1_dout,
        p_src_data_stream_1_V_empty_n => src_mat_data_stream_1_empty_n,
        p_src_data_stream_1_V_read => ImgProcess_U0_p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout => src_mat_data_stream_2_dout,
        p_src_data_stream_2_V_empty_n => src_mat_data_stream_2_empty_n,
        p_src_data_stream_2_V_read => ImgProcess_U0_p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din => ImgProcess_U0_p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n => dst_mat_data_stream_s_full_n,
        p_dst_data_stream_0_V_write => ImgProcess_U0_p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din => ImgProcess_U0_p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n => dst_mat_data_stream_1_full_n,
        p_dst_data_stream_1_V_write => ImgProcess_U0_p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din => ImgProcess_U0_p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n => dst_mat_data_stream_2_full_n,
        p_dst_data_stream_2_V_write => ImgProcess_U0_p_dst_data_stream_2_V_write,
        y_lower_dout => y_lower_channel_dout,
        y_lower_empty_n => y_lower_channel_empty_n,
        y_lower_read => ImgProcess_U0_y_lower_read,
        y_upper_dout => y_upper_channel_dout,
        y_upper_empty_n => y_upper_channel_empty_n,
        y_upper_read => ImgProcess_U0_y_upper_read,
        cb_lower_dout => cb_lower_channel_dout,
        cb_lower_empty_n => cb_lower_channel_empty_n,
        cb_lower_read => ImgProcess_U0_cb_lower_read,
        cb_upper_dout => cb_upper_channel_dout,
        cb_upper_empty_n => cb_upper_channel_empty_n,
        cb_upper_read => ImgProcess_U0_cb_upper_read,
        cr_lower_dout => cr_lower_channel_dout,
        cr_lower_empty_n => cr_lower_channel_empty_n,
        cr_lower_read => ImgProcess_U0_cr_lower_read,
        cr_upper_dout => cr_upper_channel_dout,
        cr_upper_empty_n => cr_upper_channel_empty_n,
        cr_upper_read => ImgProcess_U0_cr_upper_read);

    Mat2AXIvideo_U0 : component Mat2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Mat2AXIvideo_U0_ap_start,
        ap_done => Mat2AXIvideo_U0_ap_done,
        ap_continue => Mat2AXIvideo_U0_ap_continue,
        ap_idle => Mat2AXIvideo_U0_ap_idle,
        ap_ready => Mat2AXIvideo_U0_ap_ready,
        img_rows_V_dout => dst_mat_rows_V_chann_dout,
        img_rows_V_empty_n => dst_mat_rows_V_chann_empty_n,
        img_rows_V_read => Mat2AXIvideo_U0_img_rows_V_read,
        img_cols_V_dout => dst_mat_cols_V_chann_dout,
        img_cols_V_empty_n => dst_mat_cols_V_chann_empty_n,
        img_cols_V_read => Mat2AXIvideo_U0_img_cols_V_read,
        img_data_stream_0_V_dout => dst_mat_data_stream_s_dout,
        img_data_stream_0_V_empty_n => dst_mat_data_stream_s_empty_n,
        img_data_stream_0_V_read => Mat2AXIvideo_U0_img_data_stream_0_V_read,
        img_data_stream_1_V_dout => dst_mat_data_stream_1_dout,
        img_data_stream_1_V_empty_n => dst_mat_data_stream_1_empty_n,
        img_data_stream_1_V_read => Mat2AXIvideo_U0_img_data_stream_1_V_read,
        img_data_stream_2_V_dout => dst_mat_data_stream_2_dout,
        img_data_stream_2_V_empty_n => dst_mat_data_stream_2_empty_n,
        img_data_stream_2_V_read => Mat2AXIvideo_U0_img_data_stream_2_V_read,
        OUTPUT_STREAM_TDATA => Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID => Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TREADY => OUTPUT_STREAM_TREADY,
        OUTPUT_STREAM_TKEEP => Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB => Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER => Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST => Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID => Mat2AXIvideo_U0_OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST => Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST);

    dst_mat_rows_V_chann_U : component ImgProcess_Top_dsg8j
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_dst_mat_rows_V_out_din,
        if_full_n => dst_mat_rows_V_chann_full_n,
        if_write => Block_Mat_exit45_pro_U0_dst_mat_rows_V_out_write,
        if_dout => dst_mat_rows_V_chann_dout,
        if_empty_n => dst_mat_rows_V_chann_empty_n,
        if_read => Mat2AXIvideo_U0_img_rows_V_read);

    dst_mat_cols_V_chann_U : component ImgProcess_Top_dshbi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_dst_mat_cols_V_out_din,
        if_full_n => dst_mat_cols_V_chann_full_n,
        if_write => Block_Mat_exit45_pro_U0_dst_mat_cols_V_out_write,
        if_dout => dst_mat_cols_V_chann_dout,
        if_empty_n => dst_mat_cols_V_chann_empty_n,
        if_read => Mat2AXIvideo_U0_img_cols_V_read);

    y_lower_channel_U : component ImgProcess_Top_y_ibs
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_y_lower_out_din,
        if_full_n => y_lower_channel_full_n,
        if_write => Block_Mat_exit45_pro_U0_y_lower_out_write,
        if_dout => y_lower_channel_dout,
        if_empty_n => y_lower_channel_empty_n,
        if_read => ImgProcess_U0_y_lower_read);

    y_upper_channel_U : component ImgProcess_Top_y_jbC
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_y_upper_out_din,
        if_full_n => y_upper_channel_full_n,
        if_write => Block_Mat_exit45_pro_U0_y_upper_out_write,
        if_dout => y_upper_channel_dout,
        if_empty_n => y_upper_channel_empty_n,
        if_read => ImgProcess_U0_y_upper_read);

    cb_lower_channel_U : component ImgProcess_Top_cbkbM
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cb_lower_out_din,
        if_full_n => cb_lower_channel_full_n,
        if_write => Block_Mat_exit45_pro_U0_cb_lower_out_write,
        if_dout => cb_lower_channel_dout,
        if_empty_n => cb_lower_channel_empty_n,
        if_read => ImgProcess_U0_cb_lower_read);

    cb_upper_channel_U : component ImgProcess_Top_cblbW
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cb_upper_out_din,
        if_full_n => cb_upper_channel_full_n,
        if_write => Block_Mat_exit45_pro_U0_cb_upper_out_write,
        if_dout => cb_upper_channel_dout,
        if_empty_n => cb_upper_channel_empty_n,
        if_read => ImgProcess_U0_cb_upper_read);

    cr_lower_channel_U : component ImgProcess_Top_crmb6
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cr_lower_out_din,
        if_full_n => cr_lower_channel_full_n,
        if_write => Block_Mat_exit45_pro_U0_cr_lower_out_write,
        if_dout => cr_lower_channel_dout,
        if_empty_n => cr_lower_channel_empty_n,
        if_read => ImgProcess_U0_cr_lower_read);

    cr_upper_channel_U : component ImgProcess_Top_crncg
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_cr_upper_out_din,
        if_full_n => cr_upper_channel_full_n,
        if_write => Block_Mat_exit45_pro_U0_cr_upper_out_write,
        if_dout => cr_upper_channel_dout,
        if_empty_n => cr_upper_channel_empty_n,
        if_read => ImgProcess_U0_cr_upper_read);

    src_mat_rows_V_chann_U : component ImgProcess_Top_srocq
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_ap_return_0,
        if_full_n => src_mat_rows_V_chann_full_n,
        if_write => ap_channel_done_src_mat_rows_V_chann,
        if_dout => src_mat_rows_V_chann_dout,
        if_empty_n => src_mat_rows_V_chann_empty_n,
        if_read => AXIvideo2Mat_U0_ap_ready);

    src_mat_cols_V_chann_U : component ImgProcess_Top_srpcA
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_Mat_exit45_pro_U0_ap_return_1,
        if_full_n => src_mat_cols_V_chann_full_n,
        if_write => ap_channel_done_src_mat_cols_V_chann,
        if_dout => src_mat_cols_V_chann_dout,
        if_empty_n => src_mat_cols_V_chann_empty_n,
        if_read => AXIvideo2Mat_U0_ap_ready);

    src_mat_data_stream_s_U : component ImgProcess_Top_srqcK
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_0_V_din,
        if_full_n => src_mat_data_stream_s_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_0_V_write,
        if_dout => src_mat_data_stream_s_dout,
        if_empty_n => src_mat_data_stream_s_empty_n,
        if_read => ImgProcess_U0_p_src_data_stream_0_V_read);

    src_mat_data_stream_1_U : component ImgProcess_Top_srrcU
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_1_V_din,
        if_full_n => src_mat_data_stream_1_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_1_V_write,
        if_dout => src_mat_data_stream_1_dout,
        if_empty_n => src_mat_data_stream_1_empty_n,
        if_read => ImgProcess_U0_p_src_data_stream_1_V_read);

    src_mat_data_stream_2_U : component ImgProcess_Top_srsc4
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2Mat_U0_img_data_stream_2_V_din,
        if_full_n => src_mat_data_stream_2_full_n,
        if_write => AXIvideo2Mat_U0_img_data_stream_2_V_write,
        if_dout => src_mat_data_stream_2_dout,
        if_empty_n => src_mat_data_stream_2_empty_n,
        if_read => ImgProcess_U0_p_src_data_stream_2_V_read);

    dst_mat_data_stream_s_U : component ImgProcess_Top_dstde
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ImgProcess_U0_p_dst_data_stream_0_V_din,
        if_full_n => dst_mat_data_stream_s_full_n,
        if_write => ImgProcess_U0_p_dst_data_stream_0_V_write,
        if_dout => dst_mat_data_stream_s_dout,
        if_empty_n => dst_mat_data_stream_s_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_0_V_read);

    dst_mat_data_stream_1_U : component ImgProcess_Top_dsudo
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ImgProcess_U0_p_dst_data_stream_1_V_din,
        if_full_n => dst_mat_data_stream_1_full_n,
        if_write => ImgProcess_U0_p_dst_data_stream_1_V_write,
        if_dout => dst_mat_data_stream_1_dout,
        if_empty_n => dst_mat_data_stream_1_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_1_V_read);

    dst_mat_data_stream_2_U : component ImgProcess_Top_dsvdy
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => ImgProcess_U0_p_dst_data_stream_2_V_din,
        if_full_n => dst_mat_data_stream_2_full_n,
        if_write => ImgProcess_U0_p_dst_data_stream_2_V_write,
        if_dout => dst_mat_data_stream_2_dout,
        if_empty_n => dst_mat_data_stream_2_empty_n,
        if_read => Mat2AXIvideo_U0_img_data_stream_2_V_read);

    start_for_ImgProcwdI_U : component start_for_ImgProcwdI
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_ImgProcess_U0_din,
        if_full_n => start_for_ImgProcess_U0_full_n,
        if_write => Block_Mat_exit45_pro_U0_start_write,
        if_dout => start_for_ImgProcess_U0_dout,
        if_empty_n => start_for_ImgProcess_U0_empty_n,
        if_read => ImgProcess_U0_ap_ready);

    start_for_Mat2AXIxdS_U : component start_for_Mat2AXIxdS
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Mat2AXIvideo_U0_din,
        if_full_n => start_for_Mat2AXIvideo_U0_full_n,
        if_write => Block_Mat_exit45_pro_U0_start_write,
        if_dout => start_for_Mat2AXIvideo_U0_dout,
        if_empty_n => start_for_Mat2AXIvideo_U0_empty_n,
        if_read => Mat2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2Mat_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_hs_ready))) then 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2Mat_U0_ap_ready <= ap_sync_AXIvideo2Mat_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (ap_start and ap_hs_ready))) then 
                    ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready <= ap_sync_Block_Mat_exit45_pro_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_src_mat_cols_V_chann_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_src_mat_cols_V_chann <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_Mat_exit45_pro_U0_ap_done and Block_Mat_exit45_pro_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_src_mat_cols_V_chann <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_src_mat_cols_V_chann <= ap_sync_channel_write_src_mat_cols_V_chann;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_src_mat_rows_V_chann_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_src_mat_rows_V_chann <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Block_Mat_exit45_pro_U0_ap_done and Block_Mat_exit45_pro_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_src_mat_rows_V_chann <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_src_mat_rows_V_chann <= ap_sync_channel_write_src_mat_rows_V_chann;
                end if; 
            end if;
        end if;
    end process;


    AXIvideo2Mat_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = AXIvideo2Mat_U0_ap_ready) and (ap_const_logic_1 = ap_hs_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = AXIvideo2Mat_U0_ap_ready) and (ap_const_logic_0 = ap_hs_ready))) then 
                AXIvideo2Mat_U0_ap_ready_count <= std_logic_vector(unsigned(AXIvideo2Mat_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Block_Mat_exit45_pro_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_hs_ready) and (Block_Mat_exit45_pro_U0_ap_ready = ap_const_logic_0))) then 
                Block_Mat_exit45_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit45_pro_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_hs_ready) and (ap_const_logic_1 = Block_Mat_exit45_pro_U0_ap_ready))) then 
                Block_Mat_exit45_pro_U0_ap_ready_count <= std_logic_vector(unsigned(Block_Mat_exit45_pro_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    AXIvideo2Mat_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2Mat_U0_ap_start <= (src_mat_rows_V_chann_empty_n and src_mat_cols_V_chann_empty_n and ap_sync_AXIvideo2Mat_U0_ap_start);
    Block_Mat_exit45_pro_U0_ap_continue <= (ap_sync_channel_write_src_mat_cols_V_chann and ap_sync_channel_write_src_mat_rows_V_chann);
    Block_Mat_exit45_pro_U0_ap_start <= ap_sync_Block_Mat_exit45_pro_U0_ap_start;
    INPUT_STREAM_TREADY <= AXIvideo2Mat_U0_INPUT_STREAM_TREADY;
    ImgProcess_U0_ap_continue <= ap_const_logic_1;
    ImgProcess_U0_ap_start <= start_for_ImgProcess_U0_empty_n;
    Mat2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    Mat2AXIvideo_U0_ap_start <= start_for_Mat2AXIvideo_U0_empty_n;
    OUTPUT_STREAM_TDATA <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDATA;
    OUTPUT_STREAM_TDEST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TDEST;
    OUTPUT_STREAM_TID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TID;
    OUTPUT_STREAM_TKEEP <= Mat2AXIvideo_U0_OUTPUT_STREAM_TKEEP;
    OUTPUT_STREAM_TLAST <= Mat2AXIvideo_U0_OUTPUT_STREAM_TLAST;
    OUTPUT_STREAM_TSTRB <= Mat2AXIvideo_U0_OUTPUT_STREAM_TSTRB;
    OUTPUT_STREAM_TUSER <= Mat2AXIvideo_U0_OUTPUT_STREAM_TUSER;
    OUTPUT_STREAM_TVALID <= Mat2AXIvideo_U0_OUTPUT_STREAM_TVALID;
    ap_channel_done_src_mat_cols_V_chann <= (Block_Mat_exit45_pro_U0_ap_done and (ap_sync_reg_channel_write_src_mat_cols_V_chann xor ap_const_logic_1));
    ap_channel_done_src_mat_rows_V_chann <= (Block_Mat_exit45_pro_U0_ap_done and (ap_sync_reg_channel_write_src_mat_rows_V_chann xor ap_const_logic_1));
    ap_done <= Mat2AXIvideo_U0_ap_done;
    ap_hs_continue <= ap_const_logic_1;
    ap_hs_done <= Mat2AXIvideo_U0_ap_done;
    ap_hs_ready <= (ap_sync_AXIvideo2Mat_U0_ap_ready and ap_sync_Block_Mat_exit45_pro_U0_ap_ready);
    ap_idle <= (Block_Mat_exit45_pro_U0_ap_idle and AXIvideo2Mat_U0_ap_idle and ImgProcess_U0_ap_idle and Mat2AXIvideo_U0_ap_idle and (src_mat_rows_V_chann_empty_n xor ap_const_logic_1) and (src_mat_cols_V_chann_empty_n xor ap_const_logic_1));
    ap_ready <= ap_hs_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2Mat_U0_ap_ready <= (AXIvideo2Mat_U0_ap_ready or ap_sync_reg_AXIvideo2Mat_U0_ap_ready);
    ap_sync_AXIvideo2Mat_U0_ap_start <= (ap_start and (ap_sync_reg_AXIvideo2Mat_U0_ap_ready xor ap_const_logic_1));
    ap_sync_Block_Mat_exit45_pro_U0_ap_ready <= (Block_Mat_exit45_pro_U0_ap_ready or ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready);
    ap_sync_Block_Mat_exit45_pro_U0_ap_start <= (ap_start and (ap_sync_reg_Block_Mat_exit45_pro_U0_ap_ready xor ap_const_logic_1));
    ap_sync_channel_write_src_mat_cols_V_chann <= ((ap_channel_done_src_mat_cols_V_chann and src_mat_cols_V_chann_full_n) or ap_sync_reg_channel_write_src_mat_cols_V_chann);
    ap_sync_channel_write_src_mat_rows_V_chann <= ((ap_channel_done_src_mat_rows_V_chann and src_mat_rows_V_chann_full_n) or ap_sync_reg_channel_write_src_mat_rows_V_chann);
    start_for_ImgProcess_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_Mat2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
