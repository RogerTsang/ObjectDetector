// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module ImgProcess (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_src_data_stream_0_V_dout,
        p_src_data_stream_0_V_empty_n,
        p_src_data_stream_0_V_read,
        p_src_data_stream_1_V_dout,
        p_src_data_stream_1_V_empty_n,
        p_src_data_stream_1_V_read,
        p_src_data_stream_2_V_dout,
        p_src_data_stream_2_V_empty_n,
        p_src_data_stream_2_V_read,
        p_dst_data_stream_0_V_din,
        p_dst_data_stream_0_V_full_n,
        p_dst_data_stream_0_V_write,
        p_dst_data_stream_1_V_din,
        p_dst_data_stream_1_V_full_n,
        p_dst_data_stream_1_V_write,
        p_dst_data_stream_2_V_din,
        p_dst_data_stream_2_V_full_n,
        p_dst_data_stream_2_V_write,
        y_lower_dout,
        y_lower_empty_n,
        y_lower_read,
        y_upper_dout,
        y_upper_empty_n,
        y_upper_read,
        cb_lower_dout,
        cb_lower_empty_n,
        cb_lower_read,
        cb_upper_dout,
        cb_upper_empty_n,
        cb_upper_read,
        cr_lower_dout,
        cr_lower_empty_n,
        cr_lower_read,
        cr_upper_dout,
        cr_upper_empty_n,
        cr_upper_read
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_pp0_stage0 = 3'b10;
parameter    ap_ST_fsm_state8 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv19_0 = 19'b0000000000000000000;
parameter    ap_const_lv19_4B000 = 19'b1001011000000000000;
parameter    ap_const_lv19_1 = 19'b1;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_2 = 32'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] p_src_data_stream_0_V_dout;
input   p_src_data_stream_0_V_empty_n;
output   p_src_data_stream_0_V_read;
input  [7:0] p_src_data_stream_1_V_dout;
input   p_src_data_stream_1_V_empty_n;
output   p_src_data_stream_1_V_read;
input  [7:0] p_src_data_stream_2_V_dout;
input   p_src_data_stream_2_V_empty_n;
output   p_src_data_stream_2_V_read;
output  [7:0] p_dst_data_stream_0_V_din;
input   p_dst_data_stream_0_V_full_n;
output   p_dst_data_stream_0_V_write;
output  [7:0] p_dst_data_stream_1_V_din;
input   p_dst_data_stream_1_V_full_n;
output   p_dst_data_stream_1_V_write;
output  [7:0] p_dst_data_stream_2_V_din;
input   p_dst_data_stream_2_V_full_n;
output   p_dst_data_stream_2_V_write;
input  [31:0] y_lower_dout;
input   y_lower_empty_n;
output   y_lower_read;
input  [31:0] y_upper_dout;
input   y_upper_empty_n;
output   y_upper_read;
input  [31:0] cb_lower_dout;
input   cb_lower_empty_n;
output   cb_lower_read;
input  [31:0] cb_upper_dout;
input   cb_upper_empty_n;
output   cb_upper_read;
input  [31:0] cr_lower_dout;
input   cr_lower_empty_n;
output   cr_lower_read;
input  [31:0] cr_upper_dout;
input   cr_upper_empty_n;
output   cr_upper_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg p_src_data_stream_0_V_read;
reg p_src_data_stream_1_V_read;
reg p_src_data_stream_2_V_read;
reg p_dst_data_stream_0_V_write;
reg p_dst_data_stream_1_V_write;
reg p_dst_data_stream_2_V_write;
reg y_lower_read;
reg y_upper_read;
reg cb_lower_read;
reg cb_upper_read;
reg cr_lower_read;
reg cr_upper_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    p_src_data_stream_0_V_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] exitcond_flatten_reg_236;
reg    p_src_data_stream_1_V_blk_n;
reg    p_src_data_stream_2_V_blk_n;
reg    p_dst_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236;
reg    p_dst_data_stream_1_V_blk_n;
reg    p_dst_data_stream_2_V_blk_n;
reg    y_lower_blk_n;
reg    y_upper_blk_n;
reg    cb_lower_blk_n;
reg    cb_upper_blk_n;
reg    cr_lower_blk_n;
reg    cr_upper_blk_n;
reg   [18:0] indvar_flatten_reg_149;
reg   [31:0] y_lower_read_reg_206;
reg    ap_condition_126;
reg   [31:0] y_upper_read_reg_211;
reg   [31:0] cb_lower_read_reg_216;
reg   [31:0] cb_upper_read_reg_221;
reg   [31:0] cr_lower_read_reg_226;
reg   [31:0] cr_upper_read_reg_231;
wire   [0:0] exitcond_flatten_fu_173_p2;
reg    ap_condition_150;
reg    ap_condition_161;
reg   [0:0] ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_236;
reg   [0:0] ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_236;
reg   [0:0] ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_236;
wire   [18:0] indvar_flatten_next_fu_179_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [7:0] tmp_9_reg_245;
reg   [7:0] ap_pipeline_reg_pp0_iter2_tmp_9_reg_245;
reg   [7:0] ap_pipeline_reg_pp0_iter3_tmp_9_reg_245;
reg   [7:0] tmp_10_reg_251;
reg   [7:0] ap_pipeline_reg_pp0_iter2_tmp_10_reg_251;
reg   [7:0] ap_pipeline_reg_pp0_iter3_tmp_10_reg_251;
reg   [7:0] tmp_11_reg_257;
reg   [7:0] ap_pipeline_reg_pp0_iter2_tmp_11_reg_257;
reg   [7:0] ap_pipeline_reg_pp0_iter3_tmp_11_reg_257;
wire   [7:0] b_V_fu_185_p3;
reg   [7:0] b_V_reg_263;
wire   [7:0] g_V_fu_192_p3;
reg   [7:0] g_V_reg_268;
wire   [7:0] r_V_fu_199_p3;
reg   [7:0] r_V_reg_273;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] grp_rgb2ycbcr_fu_160_ap_return;
reg    grp_rgb2ycbcr_fu_160_ap_ce;
wire   [0:0] ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

rgb2ycbcr grp_rgb2ycbcr_fu_160(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .B_V(tmp_9_reg_245),
    .G_V(tmp_10_reg_251),
    .R_V(tmp_11_reg_257),
    .y_lower(y_lower_read_reg_206),
    .y_upper(y_upper_read_reg_211),
    .cb_lower(cb_lower_read_reg_216),
    .cb_upper(cb_upper_read_reg_221),
    .cr_lower(cr_lower_read_reg_226),
    .cr_upper(cr_upper_read_reg_231),
    .ap_return(grp_rgb2ycbcr_fu_160_ap_return),
    .ap_ce(grp_rgb2ycbcr_fu_160_ap_ce)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & ~(1'b0 == exitcond_flatten_fu_173_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & (1'b0 == exitcond_flatten_fu_173_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if ((((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & ~(1'b0 == exitcond_flatten_fu_173_p2)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'b0 == exitcond_flatten_fu_173_p2))) begin
        indvar_flatten_reg_149 <= indvar_flatten_next_fu_179_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        indvar_flatten_reg_149 <= ap_const_lv19_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_236 <= exitcond_flatten_reg_236;
        exitcond_flatten_reg_236 <= exitcond_flatten_fu_173_p2;
    end
end

always @ (posedge ap_clk) begin
    if (~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1)))) begin
        ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_236 <= ap_pipeline_reg_pp0_iter1_exitcond_flatten_reg_236;
        ap_pipeline_reg_pp0_iter2_tmp_10_reg_251 <= tmp_10_reg_251;
        ap_pipeline_reg_pp0_iter2_tmp_11_reg_257 <= tmp_11_reg_257;
        ap_pipeline_reg_pp0_iter2_tmp_9_reg_245 <= tmp_9_reg_245;
        ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_236 <= ap_pipeline_reg_pp0_iter2_exitcond_flatten_reg_236;
        ap_pipeline_reg_pp0_iter3_tmp_10_reg_251 <= ap_pipeline_reg_pp0_iter2_tmp_10_reg_251;
        ap_pipeline_reg_pp0_iter3_tmp_11_reg_257 <= ap_pipeline_reg_pp0_iter2_tmp_11_reg_257;
        ap_pipeline_reg_pp0_iter3_tmp_9_reg_245 <= ap_pipeline_reg_pp0_iter2_tmp_9_reg_245;
        ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236 <= ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_236;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & (1'b0 == ap_pipeline_reg_pp0_iter3_exitcond_flatten_reg_236))) begin
        b_V_reg_263 <= b_V_fu_185_p3;
        g_V_reg_268 <= g_V_fu_192_p3;
        r_V_reg_273 <= r_V_fu_199_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        cb_lower_read_reg_216 <= cb_lower_dout;
        cb_upper_read_reg_221 <= cb_upper_dout;
        cr_lower_read_reg_226 <= cr_lower_dout;
        cr_upper_read_reg_231 <= cr_upper_dout;
        y_lower_read_reg_206 <= y_lower_dout;
        y_upper_read_reg_211 <= y_upper_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_236 == 1'b0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        tmp_10_reg_251 <= p_src_data_stream_1_V_dout;
        tmp_11_reg_257 <= p_src_data_stream_2_V_dout;
        tmp_9_reg_245 <= p_src_data_stream_0_V_dout;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        cb_lower_blk_n = cb_lower_empty_n;
    end else begin
        cb_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        cb_lower_read = 1'b1;
    end else begin
        cb_lower_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        cb_upper_blk_n = cb_upper_empty_n;
    end else begin
        cb_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        cb_upper_read = 1'b1;
    end else begin
        cb_upper_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        cr_lower_blk_n = cr_lower_empty_n;
    end else begin
        cr_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        cr_lower_read = 1'b1;
    end else begin
        cr_lower_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        cr_upper_blk_n = cr_upper_empty_n;
    end else begin
        cr_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        cr_upper_read = 1'b1;
    end else begin
        cr_upper_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        grp_rgb2ycbcr_fu_160_ap_ce = 1'b1;
    end else begin
        grp_rgb2ycbcr_fu_160_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236))) begin
        p_dst_data_stream_0_V_blk_n = p_dst_data_stream_0_V_full_n;
    end else begin
        p_dst_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        p_dst_data_stream_0_V_write = 1'b1;
    end else begin
        p_dst_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236))) begin
        p_dst_data_stream_1_V_blk_n = p_dst_data_stream_1_V_full_n;
    end else begin
        p_dst_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        p_dst_data_stream_1_V_write = 1'b1;
    end else begin
        p_dst_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236))) begin
        p_dst_data_stream_2_V_blk_n = p_dst_data_stream_2_V_full_n;
    end else begin
        p_dst_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        p_dst_data_stream_2_V_write = 1'b1;
    end else begin
        p_dst_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_236 == 1'b0))) begin
        p_src_data_stream_0_V_blk_n = p_src_data_stream_0_V_empty_n;
    end else begin
        p_src_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_236 == 1'b0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        p_src_data_stream_0_V_read = 1'b1;
    end else begin
        p_src_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_236 == 1'b0))) begin
        p_src_data_stream_1_V_blk_n = p_src_data_stream_1_V_empty_n;
    end else begin
        p_src_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_236 == 1'b0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        p_src_data_stream_1_V_read = 1'b1;
    end else begin
        p_src_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_236 == 1'b0))) begin
        p_src_data_stream_2_V_blk_n = p_src_data_stream_2_V_empty_n;
    end else begin
        p_src_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_236 == 1'b0) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))))) begin
        p_src_data_stream_2_V_read = 1'b1;
    end else begin
        p_src_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        y_lower_blk_n = y_lower_empty_n;
    end else begin
        y_lower_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        y_lower_read = 1'b1;
    end else begin
        y_lower_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        y_upper_blk_n = y_upper_empty_n;
    end else begin
        y_upper_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_126 == 1'b1))) begin
        y_upper_read = 1'b1;
    end else begin
        y_upper_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_condition_126 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & ~(1'b1 == ap_enable_reg_pp0_iter4)) & ~(~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_173_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter5) & ~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & ~(1'b1 == ap_enable_reg_pp0_iter4)) | (~(((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_150 == 1'b1)) | ((1'b1 == ap_enable_reg_pp0_iter5) & (ap_condition_161 == 1'b1))) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == exitcond_flatten_fu_173_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_2];

always @ (*) begin
    ap_condition_126 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (y_lower_empty_n == 1'b0) | (y_upper_empty_n == 1'b0) | (cb_lower_empty_n == 1'b0) | (cb_upper_empty_n == 1'b0) | (cr_lower_empty_n == 1'b0) | (cr_upper_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_150 = (((exitcond_flatten_reg_236 == 1'b0) & (p_src_data_stream_0_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_236 == 1'b0) & (p_src_data_stream_1_V_empty_n == 1'b0)) | ((exitcond_flatten_reg_236 == 1'b0) & (p_src_data_stream_2_V_empty_n == 1'b0)));
end

always @ (*) begin
    ap_condition_161 = (((1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236) & (p_dst_data_stream_0_V_full_n == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236) & (p_dst_data_stream_1_V_full_n == 1'b0)) | ((1'b0 == ap_pipeline_reg_pp0_iter4_exitcond_flatten_reg_236) & (p_dst_data_stream_2_V_full_n == 1'b0)));
end

assign b_V_fu_185_p3 = ((grp_rgb2ycbcr_fu_160_ap_return[0:0] === 1'b1) ? ap_pipeline_reg_pp0_iter3_tmp_9_reg_245 : ap_const_lv8_0);

assign exitcond_flatten_fu_173_p2 = ((indvar_flatten_reg_149 == ap_const_lv19_4B000) ? 1'b1 : 1'b0);

assign g_V_fu_192_p3 = ((grp_rgb2ycbcr_fu_160_ap_return[0:0] === 1'b1) ? ap_pipeline_reg_pp0_iter3_tmp_10_reg_251 : ap_const_lv8_0);

assign indvar_flatten_next_fu_179_p2 = (indvar_flatten_reg_149 + ap_const_lv19_1);

assign p_dst_data_stream_0_V_din = b_V_reg_263;

assign p_dst_data_stream_1_V_din = g_V_reg_268;

assign p_dst_data_stream_2_V_din = r_V_reg_273;

assign r_V_fu_199_p3 = ((grp_rgb2ycbcr_fu_160_ap_return[0:0] === 1'b1) ? ap_pipeline_reg_pp0_iter3_tmp_11_reg_257 : ap_const_lv8_0);

endmodule //ImgProcess
