// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit45_pro (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        rows,
        cols,
        y_lower,
        y_upper,
        cb_lower,
        cb_upper,
        cr_lower,
        cr_upper,
        dst_mat_rows_V_out_din,
        dst_mat_rows_V_out_full_n,
        dst_mat_rows_V_out_write,
        dst_mat_cols_V_out_din,
        dst_mat_cols_V_out_full_n,
        dst_mat_cols_V_out_write,
        y_lower_out_din,
        y_lower_out_full_n,
        y_lower_out_write,
        y_upper_out_din,
        y_upper_out_full_n,
        y_upper_out_write,
        cb_lower_out_din,
        cb_lower_out_full_n,
        cb_lower_out_write,
        cb_upper_out_din,
        cb_upper_out_full_n,
        cb_upper_out_write,
        cr_lower_out_din,
        cr_lower_out_full_n,
        cr_lower_out_write,
        cr_upper_out_din,
        cr_upper_out_full_n,
        cr_upper_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv12_0 = 12'b000000000000;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] rows;
input  [31:0] cols;
input  [31:0] y_lower;
input  [31:0] y_upper;
input  [31:0] cb_lower;
input  [31:0] cb_upper;
input  [31:0] cr_lower;
input  [31:0] cr_upper;
output  [11:0] dst_mat_rows_V_out_din;
input   dst_mat_rows_V_out_full_n;
output   dst_mat_rows_V_out_write;
output  [11:0] dst_mat_cols_V_out_din;
input   dst_mat_cols_V_out_full_n;
output   dst_mat_cols_V_out_write;
output  [31:0] y_lower_out_din;
input   y_lower_out_full_n;
output   y_lower_out_write;
output  [31:0] y_upper_out_din;
input   y_upper_out_full_n;
output   y_upper_out_write;
output  [31:0] cb_lower_out_din;
input   cb_lower_out_full_n;
output   cb_lower_out_write;
output  [31:0] cb_upper_out_din;
input   cb_upper_out_full_n;
output   cb_upper_out_write;
output  [31:0] cr_lower_out_din;
input   cr_lower_out_full_n;
output   cr_lower_out_write;
output  [31:0] cr_upper_out_din;
input   cr_upper_out_full_n;
output   cr_upper_out_write;
output  [11:0] ap_return_0;
output  [11:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg start_write;
reg dst_mat_rows_V_out_write;
reg dst_mat_cols_V_out_write;
reg y_lower_out_write;
reg y_upper_out_write;
reg cb_lower_out_write;
reg cb_upper_out_write;
reg cr_lower_out_write;
reg cr_upper_out_write;
reg[11:0] ap_return_0;
reg[11:0] ap_return_1;

reg    real_start;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    start_once_reg;
reg    dst_mat_rows_V_out_blk_n;
reg    dst_mat_cols_V_out_blk_n;
reg    y_lower_out_blk_n;
reg    y_upper_out_blk_n;
reg    cb_lower_out_blk_n;
reg    cb_upper_out_blk_n;
reg    cr_lower_out_blk_n;
reg    cr_upper_out_blk_n;
reg    ap_condition_108;
wire   [11:0] src_mat_rows_V_fu_162_p1;
wire   [11:0] src_mat_cols_V_fu_167_p1;
reg   [11:0] ap_return_0_preg;
reg   [11:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'b1;
#0 start_once_reg = 1'b0;
#0 ap_return_0_preg = 12'b000000000000;
#0 ap_return_1_preg = 12'b000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
            ap_return_0_preg <= src_mat_rows_V_fu_162_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= ap_const_lv12_0;
    end else begin
        if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
            ap_return_1_preg <= src_mat_cols_V_fu_167_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if ((1'b1 == real_start)) begin
            start_once_reg <= 1'b1;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == real_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        ap_return_0 = src_mat_rows_V_fu_162_p1;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        ap_return_1 = src_mat_cols_V_fu_167_p1;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        cb_lower_out_blk_n = cb_lower_out_full_n;
    end else begin
        cb_lower_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        cb_lower_out_write = 1'b1;
    end else begin
        cb_lower_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        cb_upper_out_blk_n = cb_upper_out_full_n;
    end else begin
        cb_upper_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        cb_upper_out_write = 1'b1;
    end else begin
        cb_upper_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        cr_lower_out_blk_n = cr_lower_out_full_n;
    end else begin
        cr_lower_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        cr_lower_out_write = 1'b1;
    end else begin
        cr_lower_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        cr_upper_out_blk_n = cr_upper_out_full_n;
    end else begin
        cr_upper_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        cr_upper_out_write = 1'b1;
    end else begin
        cr_upper_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        dst_mat_cols_V_out_blk_n = dst_mat_cols_V_out_full_n;
    end else begin
        dst_mat_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        dst_mat_cols_V_out_write = 1'b1;
    end else begin
        dst_mat_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        dst_mat_rows_V_out_blk_n = dst_mat_rows_V_out_full_n;
    end else begin
        dst_mat_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        dst_mat_rows_V_out_write = 1'b1;
    end else begin
        dst_mat_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == start_full_n)) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((1'b1 == real_start) & ((1'b1 == internal_ap_ready) | (1'b0 == start_once_reg)))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        y_lower_out_blk_n = y_lower_out_full_n;
    end else begin
        y_lower_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        y_lower_out_write = 1'b1;
    end else begin
        y_lower_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((ap_CS_fsm_state1 == 1'b1)) begin
        y_upper_out_blk_n = y_upper_out_full_n;
    end else begin
        y_upper_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_108 == 1'b1))) begin
        y_upper_out_write = 1'b1;
    end else begin
        y_upper_out_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

always @ (*) begin
    ap_condition_108 = ((y_lower_out_full_n == 1'b0) | (y_upper_out_full_n == 1'b0) | (cb_lower_out_full_n == 1'b0) | (cb_upper_out_full_n == 1'b0) | (cr_lower_out_full_n == 1'b0) | (cr_upper_out_full_n == 1'b0) | (dst_mat_rows_V_out_full_n == 1'b0) | (dst_mat_cols_V_out_full_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign cb_lower_out_din = cb_lower;

assign cb_upper_out_din = cb_upper;

assign cr_lower_out_din = cr_lower;

assign cr_upper_out_din = cr_upper;

assign dst_mat_cols_V_out_din = src_mat_cols_V_fu_167_p1;

assign dst_mat_rows_V_out_din = src_mat_rows_V_fu_162_p1;

assign src_mat_cols_V_fu_167_p1 = cols[11:0];

assign src_mat_rows_V_fu_162_p1 = rows[11:0];

assign start_out = real_start;

assign y_lower_out_din = y_lower;

assign y_upper_out_din = y_upper;

endmodule //Block_Mat_exit45_pro
